import ecore : 'http://www.eclipse.org/emf/2002/Ecore' ; import extlib : 'extlibrary.ecore#/' ;

package tutorial : tut = 'http://www.eclipse.org/mdt/ocl/oclinecore/tutorial'
{
	package Organization : org = 'http://www.eclipse.org/mdt/ocl/oclinecore/tutorial/organization'
	{
		abstract class Librarian extends org::xx::tt::Employee
		{
			property workOn : tutorial::Library[1];
		}
		abstract class Employee extends Library
		{
			attribute name : String[1];
			property RefOutsideEcore : extlib::Item[+];
		}
		datatype JavaPackage : 'java.lang.Package' { serializable };
		enum Type
		{
			literal type1;
			literal type2;
		}
	}
	class Library { interface }
	{
		attribute name : String[1];
		property books#Library : Book[*] { composes };
		property loans : Loan[*] { composes };
		property members#Library : Member[*] { composes };
	}
	class Book
	{
		operation isAvailable() : Boolean[?]
		{
		    precondition: expr;
			body: expr;
			postcondition: expr;
		}
		attribute name : String[1];
		attribute copies : Integer[1];
		property library#books : Library[?];
		property loans : Loan[*] { derived volatile }
		{
			initial: expr;
		}
		invariant SufficientCopies: expr;
	}
	class Member
	{
		attribute name : String[1];
		property library#members : Library[?];
		property loans : Loan[*] { derived volatile }
		{
			initial: expr;
		}
		property books : Book[*] { !unique derived volatile }
		{
			initial: expr;
		}
		invariant AtMostTwoLoans: expr;
		invariant UniqueLoans: expr;
	}
	class Loan
	{
		property book : Book[1];
		property member : Member[1];
		attribute date : ecore::EDate[?];
	}
}