import ecore : 'http://www.eclipse.org/emf/2002/Ecore' ; import extlib : 'extlibrary.ecore' ;

package tutorial : tut = 'http://www.eclipse.org/mdt/ocl/oclinecore/tutorial'
{
	package Organization : org = 'http://www.eclipse.org/mdt/ocl/oclinecore/tutorial/organization'
	{
		abstract class Librarian extends Employee
		{
			property workOn : tutorial::Library[1];
		}
		abstract class Employee extends tutorial::Library
		{
			property RefOutsideEcore : extlib::Item[+];
		}
		datatype JavaPackage : 'java.lang.Package' { serializable };
		enum Type
		{
		    annotation 'MODELWRITER'
        	(
        		'constraint' = 'formula...',
        		'constraints' = ' '
        	);
			literal type1;
			literal type2;
		}
	}
	abstract class Library { interface }
	{
		attribute name : String[1] { id };
		property books#library : Book[*] { composes };
		property loans : Loan[*] { composes };
		property members#library : Member[*] { composes };
	}
	class Book
	{
		annotation 'MODELWRITER'
		(
			'constraint' = 'formula...',
			'constraints' = ''
		)
		{
			annotation 'MODELWRITERs'
			(
				'constraint' = 'formula. -> ..',
				'constraints' = 'formula...'
			)
			{
				property books : Book[*] { composes };
				attribute name : String[1] { id };
				enum Test { serializable }
				{
					literal entry1;
				}
				operation isAvailable() : Boolean[?]
				{
					annotation 'modelwriter.eu'
					(
						'constraint' = 'formula...'
					);
					body: expr;
				}
				datatype JavaPackage : 'java.lang.Package' { serializable };
				reference extlib::Book;
				reference extlib::BookOnTape::author;
				reference extlib::Addressable;
			}
			reference extlib::Book;
			reference extlib::BookOnTape::author;
			reference extlib::Addressable;
		}
		annotation;
		operation isAvailable() : Boolean[?]
		{
		    precondition:;
		    precondition test:;
			body test: expr;
			body: expr;
		}
		attribute name : String[1];
		attribute copies : Integer[1];
		property library#books : Library[?];
		property loans : Loan[*] { derived volatile }
		{
			initial: A.r;
		}
		invariant SufficientCopies: all x: A | one x.r;
	}
	class Member
	{
		attribute name : String[1];
		property library#members : Library[?];
		property loans : Loan[*] { derived volatile }
		{
			initial: x.r;
			derivation: x.r;
		}
		property books : Book[*] { !unique derived volatile }
		{
			initial: x.r;
		}
		invariant AtMostTwoLoans: all x: A | one x.r;
		invariant UniqueLoans: all x: A | one x.r;
	}
	class Loan
	{
		property book : Book[1];
		property member : Member[1];
		attribute date : ecore::EDate[?];
	}
}