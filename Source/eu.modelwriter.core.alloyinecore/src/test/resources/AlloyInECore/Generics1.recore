import Ecore : 'http://www.eclipse.org/emf/2002/Ecore';

package generics : gns = 'eu.modelwriter.generics'
{
    abstract class List<E>
    {
        operation add(element : E { ordered });
        operation iterator() : Iterator<E>[?] { !unique };
    }
    class Iterator<E>
    {
        operation next() : E[?] throws MyException<E> { ordered };
        operation next() : E[?] throws MyException<E> { ordered };
        operation hasNext() : Boolean[1] { ordered }
        {
            body : loans.collect;
        }
    }
    class ArrayList<V> extends List<V>;
    class Car;
    abstract class Person
    {
        attribute Birthday : Ecore::EDate[?] { ordered };
    }
    class Owner<K, V extends Person & Car>
    {
        property cars : ArrayList<Car>[?] { ordered };
        property owner : V[*] { ordered composes };
    }
    abstract class Shape;
    class Canvas
    {
        operation draw(shapes : List<? extends Shape>[1]) : Boolean[?];
        operation <V extends Shape> create(name : String[1]) : Car[?];
        operation create(arg : ArrayList<? super Canvas>[?]);
    }
    class MyException<T>;
}