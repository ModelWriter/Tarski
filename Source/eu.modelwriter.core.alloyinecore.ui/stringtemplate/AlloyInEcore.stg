load(name, namespace) ::=
<<
import <name><if(name)>:<endif> <namespace:singleQuote()>;
>>

package(visibility, name, prefix, namespace, subElement) ::=
<<
<visibility> package <name> : <prefix> = <namespace:singleQuote()><if(subElement)><\n><\u007B><else>;<endif>
	<subElement;separator="\n">
<if(subElement)><\u007D><\n><endif>
>>

enum(visibility, name, instanceName, isSerializable, subElement)::=
<<
<visibility> enum <name> <instanceName:singleQuote():semicolon()> <isSerializable:curlyBracket()><if(subElement)><\n><\u007B><else>;<endif>
	<subElement;separator="\n">
<if(subElement)><\u007D><\n><endif>
>>

enumLiteral(name, enumValue, subElement) ::=
<<
<if(name)>literal<endif> <name> = <enumValue> <if(subElement)><\n><\u007B><else>;<endif>
	<subElement;separator="\n">
<if(subElement)><\u007D><\n><endif>
>>

datatype(isPrimitive, name, instanceName, isSerializable, subElement)::=
<<
<if(isPrimitive)>primitive<endif> datatype <name> <(instanceName:singleQuote()):semicolon()> <isSerializable:curlyBracket()><if(subElement)><\n><\u007B><else>;<endif>
	<subElement;separator="\n">
<if(subElement)><\u007D><\n><endif>
>>

class(visibility, isAbstract, name, superClass, instanceName, isInterface, subElement) ::=
<<
<visibility> <if(isAbstract)>abstract <endif>class <name> <if(superClass)>extends<endif> <superClass;separator=", "> <instanceName:semicolon()><if(isInterface)><curlyBracket("interface")><endif><if(subElement)><\n><\u007B><else>;<endif>
	<subElement;separator="\n">
<if(subElement)><\u007D><\n><endif>
>>

attr(visibility, isStatic, name, defaultValue, type, multiplicity, qualifier, subElement)::=
<<
<visibility> <if(isStatic)>static <endif>attribute <name> <defaultValue:equals()> <type:semicolon()><multiplicity:bracket()> <qualifier> <if(subElement)><\n><\u007B><else>;<endif>
	<subElement;separator="\n">
<if(subElement)><\u007D><\n><endif>
>>

ref(visibility, isStatic, name, opposite, defaultValue, type, multiplicity, qualifier, subElement)::=
<<
<visibility> <if(isStatic)>static <endif>property <name><opposite:sharp()> <type:semicolon()><multiplicity:bracket()> <defaultValue:singleQuote():semicolon()> <qualifier> <if(subElement)><\n><\u007B><else>;<endif>
	<subElement;separator="\n">
<if(subElement)><\u007D><\n><endif>
>>

op(visibility, isStatic, name, params, throws, type, multiplicity, qualifier, subElement)::=
<<
<visibility> <if(isStatic)>static <endif>operation <name><params;separator=", ":parenthesis()><if(!params)>()<endif> <type:semicolon()><multiplicity:bracket()> <throws;separator=", ":throw()> <qualifier> <if(subElement)><\n><\u007B><else>;<endif>
	<subElement;separator="\n">
<if(subElement)><\u007D><\n><endif>
>>

anno(name, detail, subElement)::=
<<
annotation <name:singleQuote()><if(!detail && !subElement)>;<endif>
<if(detail)>(<endif>
	<detail;separator=",\n">
<if(detail)>)<endif><if(detail && !subElement)>;<endif>
<if(subElement)><\n><\u007B><endif>
	<subElement;separator="\n">
<if(subElement)><\u007D><\n><endif>
>>

edetail(name, value)::=
<<
<name:singleQuote()> = <value:singleQuote()>
>>

inv(isCallable, name, message, formula)::=
<<
<if(isCallable)>callable <endif>invariant <name> <message:doubleQuote():parenthesis()> <formula:semicolon()><if(formula)>;<endif> 
>>

precondition(name, message, formula)::=
<<
precondition <name> <message:doubleQuote():parenthesis()> <formula:semicolon()><if(formula)>;<endif> 
>>

postcondition(name, message, formula)::=
<<
postcondition <name> <message:doubleQuote():parenthesis()> <formula:semicolon()><if(formula)>;<endif> 
>>

body(name, formula)::=
<<
body <name> <formula:singleQuote():semicolon()>; 
>>

throw(x)::=" throws <x>"
parenthesis(x) ::= "(<x>)"
sharp(x) ::= "#<x>"
equals(x) ::= "= <x>"
bracket(x) ::= "[<x>]"
semicolon(x) ::=": <x>"
curlyBracket(x) ::=" <\u007B> <x> <\u007D> "
indentCurlyBracket(x) ::= "<\u007B><\n><\t><x><\n><\u007D>"
singleQuote(x)::="'<x;wrap, anchor>'"
doubleQuote(x)::="\"<x;wrap, anchor>\""

